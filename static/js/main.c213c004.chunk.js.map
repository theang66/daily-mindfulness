{"version":3,"sources":["logo.svg","App.js","Circle/index.js","BreathingPage.js","reportWebVitals.js","index.js"],"names":["App","Circle","children","color","otherProps","className","style","backgroundColor","BreathingPage","state","bgColor","colorList","breatheIn","clickMsg","breatheMsg","finished","changeClickMsg","console","log","setState","endActivity","clearInterval","intervalId","changeBgColor","e","Math","floor","random","length","restart","setInterval","this","setTimeout","prevProps","prevState","onClick","class","onMouseDown","onMouseUp","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAAe,I,YCwBAA,I,wDCZAC,MARf,YAAqD,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAUC,EAAc,oCAClD,OACE,6CAAKC,UAAU,SAASC,MAAO,CAAEC,gBAAiBJ,IAAaC,GAA/D,aACGF,MCkGQM,E,4MAnGbC,MAAQ,CACNC,QAAS,UACTC,UAAW,CACT,UACA,UACA,UACA,UACA,UACA,WAEFC,WAAW,EACXC,SAAU,+BACVC,WAAY,aACZC,UAAU,G,EAGZC,eAAiB,WACfC,QAAQC,IAAI,EAAKT,MAAMG,WACnB,EAAKH,MAAMG,WACbK,QAAQC,IAAI,iBACZ,EAAKC,SAAS,CACZL,WAAY,cACZD,SAAU,UACVD,WAAW,MAGbK,QAAQC,IAAI,gBACZ,EAAKC,SAAS,CACZL,WAAY,aACZD,SAAU,+BACVD,WAAW,M,EAuBjBQ,YAAc,WACZH,QAAQC,IAAI,gBACZG,cAAc,EAAKZ,MAAMa,YACzB,EAAKH,SAAS,CAAEJ,UAAU,K,EAG5BQ,cAAgB,SAACC,GACf,EAAKL,SAAS,CACZT,QAAS,EAAKD,MAAME,UAClBc,KAAKC,MAAMD,KAAKE,SAAW,EAAKlB,MAAME,UAAUiB,Y,EAKtDC,QAAU,WACR,EAAKV,SAAS,CAAEJ,UAAU,K,kEAhC1B,IAAIO,EAAaQ,YAAYC,KAAKf,eAAgB,KAClDe,KAAKZ,SAAS,CAAEG,WAAYA,IAG5BU,WAAWD,KAAKX,YAAa,O,yCAGZa,EAAWC,GAC5B,GAAIA,EAAUnB,WAAagB,KAAKtB,MAAMM,SAAU,CAC9C,IAAIO,EAAaQ,YAAYC,KAAKf,eAAgB,KAClDe,KAAKZ,SAAS,CAAEG,WAAYA,IAG5BU,WAAWD,KAAKX,YAAa,Q,+BAsBvB,IAAD,EAC2CW,KAAKtB,MAAjDC,EADC,EACDA,QAASG,EADR,EACQA,SAAUC,EADlB,EACkBA,WAEzB,OAHO,EAC8BC,SAIjC,sBAAKV,UAAU,eAAeC,MAAO,CAAEC,gBAAiBG,GAAxD,UACE,0EACA,uBACA,oBAAIyB,QAASJ,KAAKF,QAAlB,wBAKF,sBAAKxB,UAAU,eAAeC,MAAO,CAAEC,gBAAiBG,GAAxD,UACE,cAAC,EAAD,CACE0B,MAAM,SACNC,YAAaN,KAAKR,cAClBe,UAAWP,KAAKR,cAHlB,SAKE,6BAAKT,MAEP,oBAAIR,MAAO,CAAE,aAAc,SAA3B,SAAuCO,W,GA7FrB0B,aCObC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c213c004.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nimport \"./style.css\";\n\nfunction Circle({ children, color, ...otherProps }) {\n  return (\n    <div className=\"circle\" style={{ backgroundColor: color }} {...otherProps}>\n      {children}\n    </div>\n  );\n}\n\nexport default Circle;\n","import React, { Component } from \"react\";\nimport \"./BreathingPage.css\";\n\nimport Circle from \"./Circle\";\n\nclass BreathingPage extends Component {\n  state = {\n    bgColor: \"#CBEEF3\",\n    colorList: [\n      \"#83c5be\",\n      \"#57B8FF\",\n      \"#DCE1DE\",\n      \"#F7EBE8\",\n      \"#CBEEF3\",\n      \"#a8dadc\",\n    ],\n    breatheIn: true,\n    clickMsg: \"Press and hold on the circle\",\n    breatheMsg: \"Breathe in\",\n    finished: false,\n  };\n\n  changeClickMsg = () => {\n    console.log(this.state.breatheIn);\n    if (this.state.breatheIn) {\n      console.log(\"change to out\");\n      this.setState({\n        breatheMsg: \"Breathe out\",\n        clickMsg: \"Release\",\n        breatheIn: false,\n      });\n    } else {\n      console.log(\"change to in\");\n      this.setState({\n        breatheMsg: \"Breathe in\",\n        clickMsg: \"Press and hold on the circle\",\n        breatheIn: true,\n      });\n    }\n  };\n\n  componentDidMount() {\n    let intervalId = setInterval(this.changeClickMsg, 4000);\n    this.setState({ intervalId: intervalId });\n    // TODO: change to 5 minutes\n    // TODO: add a random gif\n    setTimeout(this.endActivity, 10000);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.finished && !this.state.finished) {\n      let intervalId = setInterval(this.changeClickMsg, 4000);\n      this.setState({ intervalId: intervalId });\n      // TODO: change to 5 minutes\n      // TODO: add a random gif\n      setTimeout(this.endActivity, 10000);\n    }\n  }\n\n  endActivity = () => {\n    console.log(\"end activity\");\n    clearInterval(this.state.intervalId);\n    this.setState({ finished: true });\n  };\n\n  changeBgColor = (e) => {\n    this.setState({\n      bgColor: this.state.colorList[\n        Math.floor(Math.random() * this.state.colorList.length)\n      ],\n    });\n  };\n\n  restart = () => {\n    this.setState({ finished: false });\n  };\n\n  render() {\n    let { bgColor, clickMsg, breatheMsg, finished } = this.state;\n\n    if (finished) {\n      return (\n        <div className=\"breathingApp\" style={{ backgroundColor: bgColor }}>\n          <h1>You've finished this breathing activity!</h1>\n          <br />\n          <h1 onClick={this.restart}>Restart</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"breathingApp\" style={{ backgroundColor: bgColor }}>\n          <Circle\n            class=\"circle\"\n            onMouseDown={this.changeBgColor}\n            onMouseUp={this.changeBgColor}\n          >\n            <h1>{breatheMsg}</h1>\n          </Circle>\n          <h2 style={{ \"margin-top\": \"110px\" }}>{clickMsg}</h2>\n        </div>\n      );\n    }\n  }\n}\n\nexport default BreathingPage;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'animate.css';\nimport BreathingPage from './BreathingPage';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BreathingPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}