{"version":3,"sources":["Circle/index.js","BreathingPage.js","reportWebVitals.js","index.js"],"names":["Circle","children","color","otherProps","className","style","backgroundColor","BreathingPage","state","bgColor","colorList","breatheIn","clickMsg","breatheMsg","finished","started","start","intervalId","setInterval","changeClickMsg","setState","setTimeout","endActivity","changeBgColor","e","Math","floor","random","length","clearInterval","this","src","width","height","frameBorder","class","allowFullScreen","href","onMouseDown","onMouseUp","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAYeA,MARf,YAAqD,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAUC,EAAc,oCAClD,OACE,6CAAKC,UAAU,SAASC,MAAO,CAAEC,gBAAiBJ,IAAaC,GAA/D,aACGF,MCiHQM,E,4MAnHbC,MAAQ,CACNC,QAAS,UACTC,UAAW,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,WAAW,EACXC,SAAU,+BACVC,WAAY,aACZC,UAAU,EACVC,SAAS,G,EAKXC,MAAQ,WACN,IAAIC,EAAaC,YAAY,EAAKC,eAAgB,KAClD,EAAKC,SAAS,CAAEH,WAAYA,EAAYF,SAAS,IACjDM,WAAW,EAAKC,YAAa,M,EAG/BH,eAAiB,WACX,EAAKX,MAAMG,UACb,EAAKS,SAAS,CACZP,WAAY,cACZD,SAAU,UACVD,WAAW,IAGb,EAAKS,SAAS,CACZP,WAAY,aACZD,SAAU,+BACVD,WAAW,K,EAKjBY,cAAgB,SAACC,GACf,EAAKJ,SAAS,CACZX,QAAS,EAAKD,MAAME,UAClBe,KAAKC,MAAMD,KAAKE,SAAW,EAAKnB,MAAME,UAAUkB,Y,EAKtDN,YAAc,WACZO,cAAc,EAAKrB,MAAMS,YACzB,EAAKG,SAAS,CAAEN,UAAU,EAAMC,SAAS,EAAOJ,WAAW,K,uDAGnD,IAAD,EACoDmB,KAAKtB,MAA1DC,EADC,EACDA,QAASG,EADR,EACQA,SAAUC,EADlB,EACkBA,WAAYC,EAD9B,EAC8BA,SAAUC,EADxC,EACwCA,QAE/C,OAAID,EAEA,sBAAKV,UAAU,eAAeC,MAAO,CAAEC,gBAAiBG,GAAxD,UACE,0EACA,wBACEsB,IAAI,6CACJC,MAAM,MACNC,OAAO,MACPC,YAAY,IACZC,MAAM,cACNC,iBAAe,IAEjB,4BACE,mBAAGC,KAAK,oFAAR,4BAMIvB,GAAaC,GAQbD,GAAYC,EAEpB,sBAAKX,UAAU,eAAeC,MAAO,CAAEC,gBAAiBG,GAAxD,UACE,cAAC,EAAD,CACE0B,MAAM,SACNG,YAAaR,KAAKP,cAClBgB,UAAWT,KAAKP,cAHlB,SAKE,6BAAKV,MAEP,oBAAIR,MAAO,CAAE,aAAc,SAA3B,SAAuCO,YAVtC,EANH,sBAAKR,UAAU,eAAeC,MAAO,CAAEC,gBAAiBG,GAAxD,UACE,2EACA,uBACA,wBAAQ+B,QAASV,KAAKd,MAAOZ,UAAU,kBAAvC,0B,GAhGkBqC,aCQbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8cdc8872.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./style.css\";\n\nfunction Circle({ children, color, ...otherProps }) {\n  return (\n    <div className=\"circle\" style={{ backgroundColor: color }} {...otherProps}>\n      {children}\n    </div>\n  );\n}\n\nexport default Circle;\n","import React, { Component } from \"react\";\nimport \"./BreathingPage.css\";\nimport Circle from \"./Circle\";\n\nclass BreathingPage extends Component {\n  state = {\n    bgColor: \"#CBEEF3\",\n    colorList: [\n      \"#83c5be\",\n      \"#57B8FF\",\n      \"#DCE1DE\",\n      \"#F7EBE8\",\n      \"#CBEEF3\",\n      \"#a8dadc\",\n      \"#f0efeb\",\n      \"#bde0fe\",\n      \"#fcd5ce\",\n      \"#d8f3dc\",\n      \"#dee2ff\",\n      \"#f7ede2\",\n      \"#faedcb\",\n      \"#dbcdf0\",\n      \"#fde2e4\",\n      \"#eff7f6\",\n      \"#f0efeb\",\n      \"#ecf39e\",\n      \"#f0e6ef\",\n      \"#dde7c7\",\n    ],\n    breatheIn: true,\n    clickMsg: \"Press and hold on the circle\",\n    breatheMsg: \"Breathe in\",\n    finished: false,\n    started: false,\n  };\n\n  // TODO: add countdown after start button, add restart button, randomize gifs, fix text selection on phone, add more colors\n\n  start = () => {\n    let intervalId = setInterval(this.changeClickMsg, 4000);\n    this.setState({ intervalId: intervalId, started: true });\n    setTimeout(this.endActivity, 30000);\n  };\n\n  changeClickMsg = () => {\n    if (this.state.breatheIn) {\n      this.setState({\n        breatheMsg: \"Breathe out\",\n        clickMsg: \"Release\",\n        breatheIn: false,\n      });\n    } else {\n      this.setState({\n        breatheMsg: \"Breathe in\",\n        clickMsg: \"Press and hold on the circle\",\n        breatheIn: true,\n      });\n    }\n  };\n\n  changeBgColor = (e) => {\n    this.setState({\n      bgColor: this.state.colorList[\n        Math.floor(Math.random() * this.state.colorList.length)\n      ],\n    });\n  };\n\n  endActivity = () => {\n    clearInterval(this.state.intervalId);\n    this.setState({ finished: true, started: false, breatheIn: true });\n  };\n\n  render() {\n    let { bgColor, clickMsg, breatheMsg, finished, started } = this.state;\n\n    if (finished) {\n      return (\n        <div className=\"breathingApp\" style={{ backgroundColor: bgColor }}>\n          <h1>You've finished this breathing activity!</h1>\n          <iframe\n            src=\"https://giphy.com/embed/ZdUnQS4AXEl1AERdil\"\n            width=\"400\"\n            height=\"400\"\n            frameBorder=\"0\"\n            class=\"giphy-embed\"\n            allowFullScreen\n          ></iframe>\n          <p>\n            <a href=\"https://giphy.com/gifs/Friends-season-6-friends-tv-episode-602-ZdUnQS4AXEl1AERdil\">\n              via GIPHY\n            </a>\n          </p>\n        </div>\n      );\n    } else if (!finished && !started) {\n      return (\n        <div className=\"breathingApp\" style={{ backgroundColor: bgColor }}>\n          <h1>Welcome to your daily breathing exercise!</h1>\n          <br />\n          <button onClick={this.start} className=\"btn btn-success\">Start</button>\n        </div>\n      );\n    } else if (!finished && started) {\n      return (\n        <div className=\"breathingApp\" style={{ backgroundColor: bgColor }}>\n          <Circle\n            class=\"circle\"\n            onMouseDown={this.changeBgColor}\n            onMouseUp={this.changeBgColor}\n          >\n            <h1>{breatheMsg}</h1>\n          </Circle>\n          <h2 style={{ \"margin-top\": \"110px\" }}>{clickMsg}</h2>\n        </div>\n      );\n    }\n  }\n}\n\nexport default BreathingPage;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css';\nimport BreathingPage from './BreathingPage';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BreathingPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}